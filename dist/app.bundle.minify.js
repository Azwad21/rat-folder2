"use strict";var global$1=void 0!==global$1?global$1:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}var cachedSetTimeout=defaultSetTimout,cachedClearTimeout=defaultClearTimeout;function runTimeout(fun){if(cachedSetTimeout===setTimeout)return setTimeout(fun,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(fun,0);try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e){return cachedSetTimeout.call(this,fun,0)}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout)return clearTimeout(marker);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(marker);try{return cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e){return cachedClearTimeout.call(this,marker)}}}"function"==typeof global$1.setTimeout&&(cachedSetTimeout=setTimeout),"function"==typeof global$1.clearTimeout&&(cachedClearTimeout=clearTimeout);var currentQueue,queue=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var timeout=runTimeout(cleanUpNextTick);draining=!0;for(var len=queue.length;len;){for(currentQueue=queue,queue=[];++queueIndex<len;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,len=queue.length}currentQueue=null,draining=!1,runClearTimeout(timeout)}}function nextTick(fun){var args=new Array(arguments.length-1);if(1<arguments.length)for(var i=1;i<arguments.length;i++)args[i-1]=arguments[i];queue.push(new Item(fun,args)),1!==queue.length||draining||runTimeout(drainQueue)}function Item(fun,array){this.fun=fun,this.array=array}Item.prototype.run=function(){this.fun.apply(null,this.array)};var title="browser",platform="browser",browser=!0,env={},argv=[],version="",versions={},release={},config={};function noop(){}var on=noop,addListener=noop,once=noop,off=noop,removeListener=noop,removeAllListeners=noop,emit=noop;function binding(name){throw new Error("process.binding is not supported")}function cwd(){return"/"}function chdir(dir){throw new Error("process.chdir is not supported")}function umask(){return 0}var performance=global$1.performance||{},performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return(new Date).getTime()};function hrtime(previousTimestamp){var nanoseconds=.001*performanceNow.call(performance),seconds=Math.floor(nanoseconds),nanoseconds=Math.floor(nanoseconds%1*1e9);return previousTimestamp&&(seconds-=previousTimestamp[0],(nanoseconds-=previousTimestamp[1])<0&&(seconds--,nanoseconds+=1e9)),[seconds,nanoseconds]}var startTime=new Date;function uptime(){return(new Date-startTime)/1e3}var browser$1={nextTick:nextTick,title:title,browser:browser,env:env,argv:argv,version:version,versions:versions,on:on,addListener:addListener,once:once,off:off,removeListener:removeListener,removeAllListeners:removeAllListeners,emit:emit,binding:binding,cwd:cwd,chdir:chdir,umask:umask,hrtime:hrtime,platform:platform,release:release,config:config,uptime:uptime},commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function commonjsRequire(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}function unwrapExports(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,"default")?x.default:x}function createCommonjsModule(fn,module){return fn(module={exports:{}},module.exports),module.exports}function getCjsExportFromNamespace(n){return n&&n.default||n}var pathParse=createCommonjsModule(function(module){var isWindows="win32"===browser$1.platform,splitWindowsRe=/^(((?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?[\\\/]?)(?:[^\\\/]*[\\\/])*)((\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))[\\\/]*$/,win32={};win32.parse=function(pathString){if("string"!=typeof pathString)throw new TypeError("Parameter 'pathString' must be a string, not "+typeof pathString);var allParts=splitWindowsRe.exec(pathString).slice(1);if(!allParts||5!==allParts.length)throw new TypeError("Invalid path '"+pathString+"'");return{root:allParts[1],dir:allParts[0]===allParts[1]?allParts[0]:allParts[0].slice(0,-1),base:allParts[2],ext:allParts[4],name:allParts[3]}};var splitPathRe=/^((\/?)(?:[^\/]*\/)*)((\.{1,2}|[^\/]+?|)(\.[^.\/]*|))[\/]*$/,posix={};posix.parse=function(pathString){if("string"!=typeof pathString)throw new TypeError("Parameter 'pathString' must be a string, not "+typeof pathString);var allParts=splitPathRe.exec(pathString).slice(1);if(!allParts||5!==allParts.length)throw new TypeError("Invalid path '"+pathString+"'");return{root:allParts[1],dir:allParts[0].slice(0,-1),base:allParts[2],ext:allParts[4],name:allParts[3]}},module.exports=(isWindows?win32:posix).parse,module.exports.posix=posix.parse,module.exports.win32=win32.parse}),pathParse_1=pathParse.posix,pathParse_2=pathParse.win32;class RatFolder{constructor(rootElm=void 0,autoInit=!0,path=void 0,type="paths"){if(this.rootElm=rootElm,this.pathType=type,null==this.rootElm)throw new Error("No root element specified");autoInit?this.define():null!=path&&path instanceof Object&&0!=Object.keys(path).length&&(this.elm=this._parsePaths(path,document.createElement("div")),this._resolvePathElement(this.elm,path),this._addComputeElements(this.elm),this._appendChild(this.elm),this._setInitialStyle(this.elm),this._setComputedStyles(this.elm),this._addEvents(this.elm),this._setGutters(this.elm))}define(){console.log("define")}_parsePaths(path,elm){return path.children&&(elm.classList.add("folder","view-element"),elm.dataset.name=path.name,elm.dataset.event=!1,path.children.forEach(e=>{if("directory"==e.type){const subFolder=document.createElement("div");subFolder.classList.add("folder","view-element"),subFolder.dataset.name=e.name,subFolder.dataset.path=e.path.replaceAll("\\","/"),subFolder.dataset.pathWindows=e.path,subFolder.dataset.size=e.size,subFolder.tabIndex=-1,subFolder.dataset.event=!1,elm.appendChild(subFolder),e.children&&this._parsePaths(e,subFolder)}}),path.children.forEach(e=>{if("file"==e.type){const file=document.createElement("div");file.classList.add("file","view-element"),file.dataset.name=e.name,file.dataset.extension=pathParse(e.path).ext,file.dataset.title==file.dataset.extension&&(file.dataset.name=null),file.dataset.path=e.path.replaceAll("\\","/"),file.dataset.pathWindows=e.path,file.dataset.size=e.size,file.tabIndex=-1,file.dataset.event=!1,elm.appendChild(file)}})),elm}_resolvePathElement(elm,path){elm.classList.contains("folder")&&(elm.classList.remove("folder"),elm.classList.add("rat-tree")),elm.classList.contains("view-element")&&elm.classList.remove("view-element"),elm.dataset.path=path.path,elm.dataset.size=path.size;let folders=elm.querySelectorAll("div.folder.view-element"),files=elm.querySelectorAll("div.file.view-element");folders.forEach(folder=>{var folderName=folder.dataset.name;let spanTextElement=document.createElement("span");spanTextElement.classList.add("textElement");let spanLabelElement=document.createElement("span");spanLabelElement.classList.add("label"),spanLabelElement.innerText=folderName,spanTextElement.appendChild(spanLabelElement),folder.insertAdjacentElement("afterbegin",spanTextElement)}),files.forEach(file=>{var fileName=file.dataset.name;file.dataset.extension;let spanTextElement=document.createElement("span");spanTextElement.classList.add("textElement");let spanLabelElement=document.createElement("span");spanLabelElement.classList.add("label"),spanLabelElement.innerText=fileName,spanTextElement.appendChild(spanLabelElement),file.insertAdjacentElement("afterbegin",spanTextElement)})}_addComputeElements(elm){let folders=elm.querySelectorAll("div.folder.view-element"),files=elm.querySelectorAll("div.file.view-element");folders.forEach(folder=>{const span=document.createElement("span");span.classList.add("caret");const i_Element=document.createElement("i");i_Element.classList.add("bi","bi-caret-right-fill");const folderSpan=document.createElement("span");folderSpan.classList.add("folderIcon");const folderIElement=document.createElement("i");folderIElement.classList.add("bi","bi-folder-fill"),span.appendChild(i_Element),folderSpan.appendChild(folderIElement),folder.querySelector("span.textElement > span.folderIcon")||folder.querySelector("span.textElement").insertAdjacentElement("afterbegin",folderSpan),folder.querySelector("span.textElement > span.caret")||folder.querySelector("span.textElement").insertAdjacentElement("afterbegin",span)}),files.forEach(file=>{const span=document.createElement("span");span.classList.add("fileIcon");const i_Element=document.createElement("i");i_Element.classList.add("bi","bi-file-earmark-fill"),span.appendChild(i_Element),file.querySelector("span.textElement > span.fileIcon")||file.querySelector("span.textElement").insertAdjacentElement("afterbegin",span)})}_appendChild(elm){this.rootElm.appendChild(elm)}_setInitialStyle(styleText,gap=5){this.sizes={caret:12,folderIcon:12,fileIcon:12,gap:gap,totalFolderPadding:gap+12+gap+12+gap,totalFilePadding:gap+12+gap},styleText.querySelector("div.folder.view-element")&&(this.sizes.caret=parseInt(getComputedStyle(styleText.querySelector("div.folder.view-element > span.textElement > span.caret")).getPropertyValue("font-size"))||12,this.sizes.folderIcon=parseInt(getComputedStyle(styleText.querySelector("div.folder.view-element > span.textElement > span.folderIcon")).getPropertyValue("font-size"))||12),styleText.querySelector("div.file.view-element")&&(this.sizes.fileIcon=parseInt(getComputedStyle(styleText.querySelector("div.file.view-element > span.textElement > span.fileIcon")).getPropertyValue("font-size"))||12),this.sizes.totalFolderPadding=3*this.sizes.gap+(this.sizes.caret+this.sizes.folderIcon),this.sizes.totalFilePadding=2*this.sizes.gap+this.sizes.fileIcon,this.sizes.iconOffset=this.sizes.totalFolderPadding-this.sizes.folderIcon-this.sizes.gap;const styleElement=document.createElement("style");styleElement.id="rat-tree-view-styling";styleText=`
            div.tree-view-container div.folder.view-element > span.textElement {
                padding-left: ${this.sizes.totalFolderPadding}px;
                padding-right: ${this.sizes.totalFolderPadding}px;
            }
            
            div.tree-view-container div.folder.view-element > span.textElement > span.caret {
                left: ${this.sizes.gap}px;
            }

            div.tree-view-container div.folder.view-element > span.textElement > span.folderIcon {
                left: ${this.sizes.iconOffset}px;
            }

            div.tree-view-container div.file.view-element > span.textElement > span.fileIcon {
                left: ${this.sizes.iconOffset}px;
            }

            div.tree-view-container div.file.view-element > span.textElement {
                padding-left: ${this.sizes.totalFolderPadding}px;
                padding-right: ${this.sizes.totalFolderPadding}px;
            }
        `;styleElement.innerText=styleText,document.head.querySelector("style#rat-tree-view-styling")?document.head.querySelector("style#rat-tree-view-styling").innerText=styleText:document.head.insertAdjacentElement("beforeend",styleElement)}_setComputedStyles(elm){const folders=elm.querySelectorAll("div.folder.view-element"),files=elm.querySelectorAll("div.file.view-element"),folderIcons=elm.querySelectorAll("span.folderIcon"),fileIcons=elm.querySelectorAll("span.fileIcon"),carets=elm.querySelectorAll("span.caret");folders.forEach(folder=>{var computePadding;folder.parentElement.classList.contains("rat-tree")?folder.querySelector("span.textElement").style.paddingLeft=this.sizes.totalFolderPadding+"px":folder.parentElement.classList.contains("folder")&&(computePadding=folder.parentElement.querySelector("span.textElement").style.paddingLeft||this.sizes.totalFolderPadding,computePadding=parseInt(computePadding)+this.sizes.folderIcon,folder.querySelector("span.textElement").style.paddingLeft=computePadding+"px")}),files.forEach(file=>{if(file.parentElement.classList.contains("folder")){var computePaddingFile=parseInt(file.parentElement.querySelector("span.textElement").style.paddingLeft)+this.sizes.folderIcon;const spanElement=file.querySelector("span.textElement");spanElement.style.paddingLeft=computePaddingFile+"px"}}),folderIcons.forEach(icon=>{var computeOffset;icon.parentElement.parentElement.parentElement.classList.contains("rat-tree-root")||(computeOffset=parseInt(icon.parentElement.style.paddingLeft)-this.sizes.totalFolderPadding+2*this.sizes.gap+this.sizes.folderIcon,icon.style.left=computeOffset+"px")}),fileIcons.forEach(icon=>{var computeOffset;icon.parentElement.parentElement.parentElement.classList.contains("rat-tree-root")||(computeOffset=parseInt(icon.parentElement.style.paddingLeft)-this.sizes.totalFolderPadding+2*this.sizes.gap+this.sizes.folderIcon,icon.style.left=computeOffset+"px")}),carets.forEach(caret=>{var computeOffset;caret.parentElement.parentElement.parentElement.classList.contains("rat-tree-root")||(computeOffset=parseInt(caret.parentElement.style.paddingLeft)-this.sizes.totalFolderPadding+this.sizes.gap,caret.style.left=computeOffset+"px")})}_setGutters(elm){const folders=elm.querySelectorAll("div.folder.view-element");folders.forEach(folder=>{folder.classList.toggle("active");var folderTopOffset=getComputedStyle(folder).getPropertyValue("height");const caretOffset=folder.querySelector("span.textElement > span.caret");folder.style=`
            --top: ${folderTopOffset};
            // --left: calc(${caretOffset.style.left} + ${caretOffset.getBoundingClientRect().width/2}px);
            --left: calc(${parseInt(getComputedStyle(caretOffset).getPropertyValue("left"))}px + ${caretOffset.getBoundingClientRect().width/2}px);
            `}),folders.forEach(folder=>{folder.classList.toggle("active")})}_addEvents(elm){const folders=elm.querySelectorAll("div.folder.view-element"),files=elm.querySelectorAll("div.file.view-element");folders&&folders.forEach(folder=>{if("false"==folder.dataset.event){folder.dataset.event=!0;const caret=folder.querySelector("span.textElement > span.caret");caret.addEventListener("click",()=>{if(this.toggleCaret(folder),caret.parentElement.parentElement.classList.toggle("viewGutter"),caret.parentElement.parentElement.classList.toggle("rat-opened"),caret.parentElement.parentElement.classList.contains("rat-hovered")?caret.parentElement.parentElement.classList.contains("rat-hovered")&&caret.parentElement.parentElement.classList.remove("rat-hovered"):caret.parentElement.parentElement.classList.add("rat-hovered"),folder.children){for(var subFolder of folder.children)subFolder.classList.contains("folder")&&subFolder.classList.toggle("active");for(var file of folder.children)file.classList.contains("file")&&file.classList.toggle("active")}}),folder.addEventListener("mouseenter",()=>{folder.classList.contains("viewGutter")&&(folder.classList.contains("rat-hovered")||folder.classList.add("rat-hovered"))}),folder.addEventListener("mouseleave",()=>{folder.classList.contains("viewGutter")&&folder.classList.contains("rat-hovered")&&folder.classList.remove("rat-hovered")})}}),files&&files.forEach(file=>{"false"==file.dataset.event&&(file.dataset.event=!0,file.addEventListener("click",()=>{this.focusedFileElement=file,files.forEach(file2=>{file2.blur()}),file.focus()}))}),this.rootElm.dataset.loaded=!0}toggleCaret(elm){const i=elm.querySelector("span.textElement > span.caret > i.bi");(i.classList.contains("bi-caret-right-fill")||i.classList.contains("bi-caret-down-fill"))&&(i.classList.toggle("bi-caret-right-fill"),i.classList.toggle("bi-caret-down-fill"))}message(path,type){if(this.rootElm.dataset.loaded){const elm=this.elm;var targetElement,className,blinkInterval;if("file"==type){const files=elm.querySelectorAll("[data-path].file");files.forEach(file=>{file.dataset.path==path&&(targetElement=file)})}if("folder"==type){const folders=elm.querySelectorAll("[data-path].folder");folders.forEach(folder=>{folder.dataset.path==path&&(targetElement=folder)})}return{path:path,blink:function(ms=200){className?(blinkInterval&&clearInterval(blinkInterval),blinkInterval=setInterval(()=>{targetElement.classList.toggle(className)},ms)):console.warn("Please use a message method first")},disposeBlink:function(e=!1){blinkInterval&&(clearInterval(blinkInterval),blinkInterval=!1,e?targetElement.classList.contains(className)||targetElement.classList.add(className):targetElement.classList.contains(className)&&targetElement.classList.remove(className))},turnOff:function(){targetElement&&targetElement.classList.contains(className)&&targetElement.classList.remove(className)},sendAlert:function(){className="rat-alert",targetElement.classList.toggle(className)},sendWarn:function(){className="rat-warning",targetElement.classList.toggle(className)},sendSuccess:function(){className="rat-success",targetElement.classList.toggle(className)},sendInfo:function(){className="rat-info",targetElement.classList.toggle(className)}}}}refresh(eventAdder=0,elm=this.elm){this._addComputeElements(elm),this._setComputedStyles(elm),this._addEvents(elm)}addFile(referencePath,referencePathType,config,type,cb){if("file"==referencePathType){if("file"==type){const files=this.elm.querySelectorAll("[data-path].file");files.forEach(fileExtension=>{const parent=fileExtension.parentElement;if(fileExtension.dataset.path.replaceAll("\\","/")==referencePath.replaceAll("\\","/")){var name=config.name||null;if(null!=name){fileExtension=config.extension||null;for(const children of parent.children)if(children.classList.contains("file")&&children.dataset.name==name)return void console.error("A file with same name exists.");const fileElement=document.createElement("div");fileElement.classList.add("file","view-element"),parent.classList.contains("rat-opened")&&fileElement.classList.add("active"),fileElement.dataset.name=name,fileElement.dataset.extension=fileExtension,fileElement.dataset.path=parent.dataset.path.replaceAll("/","\\")+"\\"+name,fileElement.tabIndex=-1;const spanTextElement=document.createElement("span");spanTextElement.classList.add("textElement");const spanLabelElement=document.createElement("span");spanLabelElement.classList.add("label"),spanLabelElement.innerText=name,spanTextElement.appendChild(spanLabelElement),fileElement.appendChild(spanTextElement),parent.appendChild(fileElement),this.refresh();const fileNames=[],sortedElements=[];for(const children of parent.children)children.classList.contains("file")&&(fileNames.push(children.dataset.name),fileNames.sort());if(fileNames.forEach(fileName=>{for(const children of parent.children)children.classList.contains("file")&&children.dataset.name==fileName&&(sortedElements.push(children.cloneNode(!0)),children.remove())}),sortedElements.forEach(elm=>{parent.appendChild(elm)}),0==cb()){console.log(!1);for(const children of parent.children)children.classList.contains("file")&&children.dataset.path==fileElement.dataset.path&&children.remove()}}else console.error("Please give a name for the file")}})}else if("folder"==type){const files=this.elm.querySelectorAll("[data-path].file");files.forEach(file=>{const parent=file.parentElement;if(file.dataset.path.replaceAll("\\","/")==referencePath.replaceAll("\\","/")){var name=config.name;for(const children of parent.children)if(children.classList.contains("folder")&&name==children.dataset.name){console.error("A folder with same name exists.");break}const folderElement=document.createElement("div");folderElement.classList.add("folder","view-element"),folderElement.dataset.name=name,folderElement.dataset.path=parent.dataset.path.replaceAll("/","\\")+"\\"+name,folderElement.tabIndex=-1;const spanTextElement=document.createElement("span");spanTextElement.classList.add("textElement");const spanLabelElement=document.createElement("span");spanLabelElement.classList.add("label"),spanLabelElement.innerText=name,spanTextElement.appendChild(spanLabelElement),folderElement.appendChild(spanTextElement),parent.classList.contains("folder")?parent.querySelector("span.textElement").insertAdjacentElement("afterend",folderElement):parent.insertAdjacentElement("afterbegin",folderElement),this.refresh();var folderNames=[],folderElementNames=[];for(const children of parent.children)children.classList.contains("folder")&&(folderNames.push(children.dataset.name),folderNames.sort());folderNames.forEach(folderName=>{for(const children of parent.children)children.classList.contains("folder")&&folderName==children.dataset.name&&(folderElementNames.unshift(children.cloneNode(!0)),children.remove())}),folderElementNames.forEach(folderElementName=>{parent.classList.contains("folder")?(folderElementName.dataset.event=!1,parent.querySelector("span.textElement").insertAdjacentElement("afterend",folderElementName)):(folderElementName.dataset.event=!1,parent.insertAdjacentElement("afterbegin",folderElementName)),this.refresh()})}})}}else if("folder"==referencePathType){type="file";{const folders=this.elm.querySelectorAll("[data-path].folder");folders.forEach(folder=>{var configFileExtension=folder.dataset.path;const files=folder.children;if(referencePath==configFileExtension){var sameFileName=!1;for(const file of files){file.dataset.name;file.classList.contains("file")&&config.name==file.dataset.name&&(console.error("A file with same name exists."),sameFileName=!0)}if(1!=sameFileName){if(null==config.name||null==config.extension)return config.extension||console.warn("Please specify a file extension."),void(config.name||console.warn("Please specify a file name."));var configFileName=config.name,configFileExtension=config.extension;const fileElement=document.createElement("div");fileElement.classList.add("file","view-element"),folder.classList.contains("rat-opened")&&fileElement.classList.add("active"),fileElement.dataset.name=configFileName,fileElement.dataset.extension=configFileExtension,fileElement.dataset.path=folder.dataset.path.replaceAll("/","\\")+"\\"+configFileName,fileElement.tabIndex=-1;const spanTextElement=document.createElement("span");spanTextElement.classList.add("textElement");const spanLabelElement=document.createElement("span");spanLabelElement.classList.add("label"),spanLabelElement.innerText=configFileName,spanTextElement.appendChild(spanLabelElement),fileElement.appendChild(spanTextElement),folder.appendChild(fileElement),this.refresh();var fileElementNames=[],elements=[];for(const file of files)file.classList.contains("file")&&(fileElementNames.push(file.dataset.name),fileElementNames.sort());fileElementNames.forEach(name=>{for(const file of files)file.classList.contains("file")&&file.dataset.name==name&&elements.push(file)})}}})}}}_createFileElement(name,ext,path){const fileElement=document.createElement("div");fileElement.classList.add("file","view-element"),fileElement.dataset.name=name,fileElement.dataset.extension=ext,fileElement.dataset.path=path,fileElement.dataset.pathWindows=path.replaceAll("/","\\"),fileElement.dataset.event=!1,fileElement.tabIndex=-1;const spanTextElement=document.createElement("span");spanTextElement.classList.add("textElement");const spanLabelElement=document.createElement("span");return spanLabelElement.classList.add("label"),spanLabelElement.innerText=name,spanTextElement.appendChild(spanLabelElement),fileElement.appendChild(spanTextElement),fileElement}addFile2(referencePath,referencePathType,config,cb){if("file"==referencePathType){const newPath=referencePath.replaceAll("\\","/");try{var file=this.elm.querySelector(`[data-path="${newPath}"].file`);if(this.elm.querySelectorAll("[data-path].file").forEach(elm=>{elm.dataset.path==newPath&&(file=elm)}),null==file)return void console.warn(`Reference path(${referencePath}) cannot find the element.`);const parentElement=file["parentElement"];if(!config.name||!config.extension)return void console.warn("A file name or extension was not given. PLease specify it.");var configName=config.name,configExtension=config.extension;const fileElement=this._createFileElement(configName,configExtension,parentElement.dataset.path+"/"+configName);parentElement.classList.contains("rat-opened")&&fileElement.classList.add("active");for(const children of parentElement.children)if(children.classList.contains("file")&&fileElement.dataset.name==children.dataset.name)return void console.error("A file with same name exists.");const fileElementNames=[];fileElementNames.push(fileElement.dataset.name);for(const children of parentElement.children)children.classList.contains("file")&&(fileElementNames.push(children.dataset.name),fileElementNames.sort());var nextFileElementName=fileElementNames[fileElementNames.indexOf(fileElement.dataset.name)+1];null!=nextFileElementName?(parentElement.querySelector(`[data-name="${nextFileElementName}"].file`).insertAdjacentElement("beforebegin",fileElement),this.refresh()):null==nextFileElementName&&(parentElement.appendChild(fileElement),this.refresh())}catch(err){console.log(err)}}}}